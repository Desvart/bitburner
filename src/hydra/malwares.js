import {MALWARE_CONFIG} from '/hydra/malwares.js';

class Malware {
    
    filePath;
    targetName;
    runnerName;
    marketImpact;
    coresQty;
    
    get ramRequirement() { return this.ns.getScriptRam(this.file, this.runnerName); };
    
    constructor(ns, file, targetName, runnerName, marketImpact) {
        this.ns = ns;
        this.file = file;
        this.targetName = targetName;
        this.runnerName = runnerName;
        this.marketImpact = marketImpact;
        this.coresQty = ns.getServer(this.runnerName).cpuCores;
    }
    
    execute(runnerName, targetName, threadsQty, marketImpact = false, blockId = 0, stepId = 0) {
        this.ns.exec(this.filePath, runnerName, threadsQty, targetName, threadsQty, marketImpact, blockId, stepId);
    }
    
}

class Weaken extends Malware {
    
    duration;
    unitMoneyImpact = 0;
    unitSecurityDecrease;
    
    constructor(ns, targetName, runnerName = 'home', marketImpact = false) {
        super(ns, MALWARE_CONFIG.WEAKEN_FILE, runnerName, targetName, marketImpact);
        this.duration = ns.getWeakenTime(targetName);
        this.unitSecurityDecrease = this.ns.weakenAnalyze(1, this.coresQty);
    }
    
    threadsQtyToDecreaseSecurityOf(securityQtyToDecrease) {
        return Math.ceil(securityQtyToDecrease / this.unitSecurityDecrease);
    }
}

class Grow extends Malware {
    
    duration;
    unitMoneyIncrease;
    unitSecurityIncrease;
    
    constructor(ns, targetName, runnerName = 'home', marketImpact = false) {
        super(ns, MALWARE_CONFIG.GROW_FILE, runnerName, targetName, marketImpact);
        this.duration = ns.getGrowTime(targetName);
        this.unitMoneyIncrease = this.#getUnitMoneyIncrease();
        this.unitSecurityIncrease = this.ns.growthAnalyzeSecurity(1);
    }
    
    #getUnitMoneyIncrease() {
        if (this.fileExists('Formulas.exe', 'home') === true) {
            const target = this.ns.getServer(this.targetName);
            this.ns.formulas.hacking.growPercent(target, 1, this.getPlayer(), this.coresQty);
            
        } else {
            return undefined;
        }
    }
    
    threadsQtyToIncreaseMoneyOf(moneyRatioToIncrease) {
        return Math.ceil(this.ns.growthAnalyze(this.targetName, 1 + moneyRatioToIncrease, this.coresQty));
    }
}

class Hack extends Malware {
    
    duration;
    unitMoneyDecrease;
    unitSecurityIncrease;
    successRate;
    
    constructor(ns, targetName, runnerName = 'home', marketImpact = false) {
        super(ns, MALWARE_CONFIG.HACK_FILE, runnerName, targetName, marketImpact);
        this.duration = ns.getHackTime(targetName);
        this.unitMoneyDecrease = ns.hackAnalyze(targetName);
        this.unitSecurityIncrease = this.ns.hackAnalyzeSecurity(1);
        this.successRate = ns.hackAnalyzeChance(targetName);
    }
    
    threadsQtyToDecreaseMoneyOf(moneyRatioToDecrease) {
        const moneyQtyToDecrease = moneyRatioToDecrease * this.ns.getServerMoneyAvailable(this.targetName);
        return Math.ceil(this.ns.hackAnalyzeThreads(this.targetName, moneyQtyToDecrease));
    }
}