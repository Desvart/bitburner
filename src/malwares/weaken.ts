import {LogNsAdapter} from '/resources/helpers.js';

export async function main(ns) {
    const nsA = new MalwareAdapter(ns);
    const logA = new LogNsAdapter(ns);
    
    const timestampStart: number = Date.now();
    
    const target: string = ns.args[0];
    const threadCount: number = ns.args[1];
    const delay: number = ns.args[2]; //ms
    const blockId: number = ns.args[3];
    const stepId: number = ns.args[4];
    const marketImpact: boolean = ns.args[5];
    
    const operationId: string = `${blockId}-${stepId}`;
    
    logA.info(`${target} - ${operationId} - ${threadCount} Weaken start in ${logA.formatDuration(delay)}`);
    await nsA.sleep(delay);
    
    logA.info(`${target} - ${operationId} - ${threadCount} Weaken start now`);
    const reducedSecurity = await nsA.weaken(target, threadCount, marketImpact);
    
    const timestampStop: number = Date.now();
    const hackDuration: number = timestampStop - timestampStart;
    logA.info(`${target} - ${operationId} - Weaken stop - Duration ${hackDuration} - Security: -${reducedSecurity}`);
}

export class MalwareAdapter {
    private readonly ns;
    
    constructor(ns) {
        this.ns = ns;
    }
    
    async weaken(target: string, threads: number = 1, stock: boolean = false): Promise<number> {
        return await this.ns.weaken(target, {threads: threads, stock: stock});
    }
    
    async sleep(delay: number) {
        await this.ns.sleep(delay);
    }
}