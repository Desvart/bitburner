var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { LogNsAdapter } from '/resources/helpers.js';
export function main(ns) {
    return __awaiter(this, void 0, void 0, function* () {
        const log = new LogNsAdapter(ns);
        const timestampStart = Date.now();
        const target = ns.args[0];
        const threadCount = ns.args[1];
        const marketImpact = ns.args[2];
        const blockId = ns.args[3];
        const stepId = ns.args[4];
        const opId = `${blockId}-${stepId}`;
        log.info(`${target} - ${opId} - Weaken start - hThreads: ${threadCount}`);
        const reducedSecurity = yield ns.weaken(target, { threads: threadCount, stock: marketImpact });
        const timestampStop = Date.now();
        const hackDuration = timestampStop - timestampStart;
        log.info(`${target} - ${opId} - Weaken stop - Duration ${hackDuration} - Security: -${reducedSecurity}\n`);
    });
}
//# sourceMappingURL=weaken.js.map