import {KITTY_HACK_CONFIG} from '/malwares/kitty-hack-config';

export async function main(ns) {
    const nsA = new KittyHackAdapter(ns);
    
    //noinspection InfiniteLoopJS
    while (true) {
        const hostState = {
            minSec: nsA.getServerMinSecurityLevel(KITTY_HACK_CONFIG.HOSTNAME),
            actualSec: nsA.getServerSecurityLevel(KITTY_HACK_CONFIG.HOSTNAME),
            maxMoney: nsA.getServerMaxMoney(KITTY_HACK_CONFIG.HOSTNAME),
            availMoney: nsA.getServerMoneyAvailable(KITTY_HACK_CONFIG.HOSTNAME),
        };
        
        if (hostState.actualSec > hostState.minSec) {
            await nsA.weaken(KITTY_HACK_CONFIG.HOSTNAME);
            
        } else if (hostState.availMoney < hostState.maxMoney) {
            await nsA.grow(KITTY_HACK_CONFIG.HOSTNAME);
            
        } else {
            await nsA.hack(KITTY_HACK_CONFIG.HOSTNAME);
        }
    }
}

class KittyHackAdapter {
    private readonly ns;
    constructor(ns) {
        this.ns = ns;
    }
    
    getServerSecurityLevel(hostname: string): number {
        return this.ns.getServerSecurityLevel(hostname);
    }
    
    getServerMoneyAvailable(hostname: string): number {
        return this.ns.getServerMoneyAvailable(hostname);
    }
    
    async weaken(hostname: string): Promise<void> {
        await this.ns.weaken(hostname);
    }
    
    async grow(hostname: string): Promise<void> {
        await this.ns.grow(hostname);
    }
    
    async hack(hostname: string): Promise<void> {
        await this.ns.hack(hostname);
    }
    
    getServerMinSecurityLevel(hostname: string): number {
        return this.ns.getServerMinSecurityLevel(hostname);
    }
    
    getServerMaxMoney(hostname: string): number {
        return this.ns.getServerMaxMoney(hostname);
    }
}