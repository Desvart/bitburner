var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Log } from '/resources/helpers';
import { getService2, ServiceName } from '/resources/service';
export function main(ns) {
    return __awaiter(this, void 0, void 0, function* () {
        const log = new Log(ns);
        const malware = 'HACK';
        const arg = ns.args[0];
        const params = JSON.parse(arg);
        const { target, threadCount = 1, marketImpact = false, callRef = '' } = params;
        const node = yield getService2(ns, ServiceName.Network).then(network => network.getNode(target));
        let moneyStat = `Money ${log.formatMoney(node.getAvailableMoney())} / ${log.formatMoney(node.maxMoney)}`;
        let securityStat = `Security ${node.getSecurityLevel()} / ${node.minSec}`;
        log.info([
            `${target} - ${malware} ${threadCount}x (${callRef} on ${target}) - START now.`,
            `Target stat.: ${moneyStat} \t ${securityStat}`
        ].join('\n'));
        const timestampStart = Date.now();
        const earnedMoney = log.formatMoney(yield ns.hack(target, { threads: threadCount, stock: marketImpact }));
        const timestampStop = Date.now();
        const execDuration = `Malware duration: ${log.formatDuration(timestampStop - timestampStart)}`;
        const execMoneyImpact = `Money stolen: ${earnedMoney}`;
        const execSecurityImpact = `Security rise: +${0.002 * threadCount}`;
        moneyStat = `Money ${log.formatMoney(node.getAvailableMoney())} / ${log.formatMoney(node.maxMoney)}`;
        securityStat = `Security ${node.getSecurityLevel()} / ${node.minSec}`;
        log.success([
            `${target} - ${malware} ${threadCount}x (${callRef} on ${target}) - DONE`,
            `${execDuration} \t ${execMoneyImpact} \t ${execSecurityImpact}`,
            `Target stat.: ${moneyStat} \t ${securityStat}`
        ].join('\n'));
    });
}
//# sourceMappingURL=malware-hack2.js.map