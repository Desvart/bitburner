import {INs, Log} from '/resources/helpers';

export async function main(ns: INs) {
    const log = new Log(ns);
    const malware = 'WEAKEN';
    // noinspection DuplicatedCode
    let timestampStart: number = Date.now();
    
    const target: string = ns.args[0];
    const threadCount: number = ns.args[1];
    let delay: number = ns.args[2]; //ms
    delay ??= 0;
    const blockId: number = ns.args[3];
    const stepId: number = ns.args[4];
    const marketImpact: boolean = ns.args[5];
    let caller: string = ns.args[6];
    if (typeof caller !== undefined)
        caller = caller + ' > ';
    else
        caller ??= '';
    
    let operationId: string = '';
    if (blockId !== 0)
        operationId = `- ${blockId}-${stepId} `;
    
    log.info(`${caller}${malware} ${target} (${threadCount}x) ${operationId}- START in ${log.formatDuration(delay)}`);
    await ns.sleep(delay);
    
    timestampStart = Date.now();
    
    log.info(`${caller}${malware} ${target} (${threadCount}x) ${operationId}- START now`);
    const reducedSecurity = await weaken(ns, target, threadCount, marketImpact);
    
    const timestampStop: number = Date.now();
    const hackDuration: string = log.formatDuration(timestampStop - timestampStart);
    log.info(`${caller}${malware} ${target} (${threadCount}x) ${operationId}- STOP: ${hackDuration} duration; Security: -${reducedSecurity}`);
}

async function weaken(ns: INs, target: string, threads: number = 1, stock: boolean = false): Promise<number> {
    return await ns.weaken(target, {threads: threads, stock: stock});
}
