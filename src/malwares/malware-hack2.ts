import {Server} from '/resources/network';
import {INs, Log} from '/resources/helpers';
import {getService2, ServiceName} from '/resources/service';

interface Params {
    target: string,
    threadCount: number,
    marketImpact: boolean,
    callRef: string,
}

export async function main(ns: INs) {
    
    const log = new Log(ns);
    const malware = 'HACK';
    const arg: string = ns.args[0];
    const params: Params = JSON.parse(arg);
    const {target, threadCount = 1, marketImpact = false, callRef = ''}: Params = params;
    
    
    const node: Server = await getService2(ns, ServiceName.Network).then(network => network.getNode(target));
    let moneyStat: string = `Money ${log.formatMoney(node.getAvailableMoney())} / ${log.formatMoney(node.maxMoney)}`;
    let securityStat: string = `Security ${node.getSecurityLevel()} / ${node.minSec}`;
    log.info([
        `${target} - ${malware} ${threadCount}x (${callRef} on ${target}) - START now.`,
        `Target stat.: ${moneyStat} \t ${securityStat}`
    ].join('\n'));
    
    
    const timestampStart: number = Date.now();
    const earnedMoney: string = log.formatMoney(await ns.hack(target, {threads: threadCount, stock: marketImpact}));
    const timestampStop: number = Date.now();
    
    
    const execDuration: string = `Malware duration: ${log.formatDuration(timestampStop - timestampStart)}`;
    const execMoneyImpact: string = `Money stolen: ${earnedMoney}`;
    const execSecurityImpact: string = `Security rise: +${0.002 * threadCount}`;
    moneyStat = `Money ${log.formatMoney(node.getAvailableMoney())} / ${log.formatMoney(node.maxMoney)}`;
    securityStat = `Security ${node.getSecurityLevel()} / ${node.minSec}`;
    log.success([
        `${target} - ${malware} ${threadCount}x (${callRef} on ${target}) - DONE`,
        `${execDuration} \t ${execMoneyImpact} \t ${execSecurityImpact}`,
        `Target stat.: ${moneyStat} \t ${securityStat}`
    ].join('\n'));
}