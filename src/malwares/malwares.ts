import {WormAdapter} from '/malwares/worm-adapters';
import {LogNsAdapter} from '/resources/helpers';
import {WORM_CONFIG} from '/malwares/worm-config';

export class Hack {
    
    private readonly nsA: WormAdapter;
    private readonly logA: LogNsAdapter;
    
    constructor(nsA: WormAdapter, logA: LogNsAdapter) {
        this.nsA = nsA;
        this.logA = logA;
    }
    
    
    async execute(targetName: string, threadsQty: number): Promise<void> {
        const executionDuration: number = this.getDuration(targetName);
        this.nsA.exec(WORM_CONFIG.PACKAGE[1], targetName, threadsQty);
        await this.nsA.sleep(executionDuration);
    }
}

export class Weaken {
    
    private readonly nsA: WormAdapter;
    private readonly logA: LogNsAdapter;
    
    constructor(nsA: WormAdapter, logA: LogNsAdapter) {
        this.nsA = nsA;
        this.logA = logA;
    }
    
    getDuration(targetName: string): number {
        return this.nsA.getWeakenTime(targetName);
    }
    
    getRamRequirement(runnerName: string): number {
        return this.nsA.getScriptRam(WORM_CONFIG.PACKAGE[2], runnerName);
    }
    
    async execute(targetName: string, threadsQty: number): Promise<void> {
        const executionDuration: number = this.getDuration(targetName);
        this.nsA.exec(WORM_CONFIG.PACKAGE[2], targetName, threadsQty);
        await this.nsA.sleep(executionDuration);
    }
}

export class Grow {
    
    private readonly nsA: WormAdapter;
    private readonly logA: LogNsAdapter;
    
    constructor(nsA: WormAdapter, logA: LogNsAdapter) {
        this.nsA = nsA;
        this.logA = logA;
    }
    
    getDuration(targetName: string): number {
        return this.nsA.getGrowTime(targetName);
    }
    
    getRamRequirement(runnerName: string): number {
        return this.nsA.getScriptRam(WORM_CONFIG.PACKAGE[3], runnerName);
    }
    
    async execute(targetName: string, threadsQty: number): Promise<void> {
        const executionDuration: number = this.getDuration(targetName);
        this.nsA.exec(WORM_CONFIG.PACKAGE[3], targetName, threadsQty);
        await this.nsA.sleep(executionDuration);
    }
}
