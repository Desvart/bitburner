var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { LogNsAdapter } from '/resources/helpers.js';
export function main(ns) {
    return __awaiter(this, void 0, void 0, function* () {
        const nsA = new MalwareAdapter(ns);
        const logA = new LogNsAdapter(ns);
        const timestampStart = Date.now();
        const target = ns.args[0];
        const threadCount = ns.args[1];
        const delay = ns.args[2]; //ms
        const blockId = ns.args[3];
        const stepId = ns.args[4];
        const marketImpact = ns.args[5];
        const operationId = `${blockId}-${stepId}`;
        logA.info(`${target} - ${operationId} - ${threadCount} Hack start in ${logA.formatDuration(delay)}`);
        yield nsA.sleep(delay);
        logA.info(`${target} - ${operationId} - ${threadCount} Hack start now`);
        const earnedMoney = yield nsA.hack(target, threadCount, marketImpact);
        const timestampStop = Date.now();
        const hackDuration = timestampStop - timestampStart;
        logA.info(`${target} - ${operationId} - Hack stop - Duration ${hackDuration} - Gain: ${earnedMoney}`);
    });
}
export class MalwareAdapter {
    constructor(ns) {
        this.ns = ns;
    }
    hack(target, threads = 1, stock = false) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.ns.hack(target, { threads: threads, stock: stock });
        });
    }
    sleep(delay) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ns.sleep(delay);
        });
    }
}
//# sourceMappingURL=hack.js.map